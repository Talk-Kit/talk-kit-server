plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

ext {
    serverEnv = System.getProperty('server.env', 'dev')
    springBootVersion = '3.3.1'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.cloud.tools.jib'

    group = 'com.talkkit'
    version = "0.0.1-SNAPSHOT"

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

subprojects {
    dependencies {
        //lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(':canal-api') {
    def dockerRepository = System.getenv('DOCKER_REPOSITORY')
    def dockerImage = System.getenv('DOCKER_IMAGE')
    def serverEnv = System.getenv('SERVER_ENV')
    def mainClass = System.getenv('MAIN_CLASS')
    def containerPort = System.getenv('CONTAINER_PORT')

    if (serverEnv == 'dev') {
        jib {
            from {
                image = 'openjdk:21'
            }
            to {
                image = "${dockerRepository}/${dockerImage}"
                tags = ['latest']
            }
            container {
                mainClass = mainClass
                jvmFlags = ['-Dspring.profiles.active=dev', '-Dfile.encoding=UTF-8']
                ports = [containerPort]
                allowInsecureRegistries = true
            }
        }
    }

    dependencies {
        implementation(project(":canal-domain"))
        implementation(project(":canal-helper"))
    }
}

project(':canal-domain') {
    dependencies {
        implementation(project(':canal-helper'))
    }
    bootJar { enabled = false }
    jar { enabled = true }
}

project(':canal-helper') {
    dependencies {
    }
}


tasks {
    copy {
        from("./talk-kit-secret")
        include("application*.yml")
        into("canal-api/src/main/resources")
    }
    copy {
        from("./talk-kit-secret/k8s")
        include("k8s*.yml")
        include("*kubeconfig.yml")
        into("./k8s")
    }
}
